import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { fetchUsers } from "./UsersAPI";

export interface UsersState {
  users: any;
  status: "idle" | "loading" | "failed";
}

const initialState: UsersState = {
  users: [],
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getUsersAsync = createAsyncThunk(
  "counter/fetchCount",
  async (userId: any) => {
    const response = await fetchUsers(userId);
    console.log(response.data);
    return response.data;
  }
);

export const usersSlice = createSlice({
  name: "users",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setUsers: (state, action: PayloadAction<any[]>) => {
      state.users = action.payload;
    },
    setState: (state, action: PayloadAction<"idle" | "loading" | "failed">) => {
      state.status = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getUsersAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getUsersAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.users = action.payload;
      });
  },
});

export const { setState, setUsers } = usersSlice.actions;

export const usersState = (state: RootState) => state.users;

export default usersSlice.reducer;
